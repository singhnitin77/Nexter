*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }

body {
  font-family: "Nunito", sans-serif;
  color: #6d5d4b;
  line-height: 1.6;
  font-weight: 300; }

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; }
  .container > * {
    padding: 40px;
    font-size: 3rem; }

.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

.heading-1 {
  font-size: 4.5rem;
  color: #f9f7f6;
  line-height: 1; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483a; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483a; }

.btn {
  background-color: #c69963;
  color: #fff;
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all 0.2s; }
  .btn:hover {
    background-color: #b28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1;
  /* We want the sidebar to start from the grid line sidebar start, end at sidebar-end */
  display: flex;
  justify-content: center; }

.nav-btn {
  border: none;
  border-radius: 0;
  background-color: #fff;
  height: 2px;
  width: 4.5rem;
  margin-top: 4rem; }
  .nav-btn::before, .nav-btn::after {
    background-color: #fff;
    height: 2px;
    width: 4.5rem;
    content: "";
    display: block; }
  .nav-btn::before {
    transform: translateY(-1.5rem); }
  .nav-btn::after {
    transform: translateY(1.3rem); }

.header {
  background-color: #54483a;
  grid-column: full-start / col-end 6;
  /* WHen we have a named set of grid lines, then we have to use the numbers in this case it ends after the sixth column */
  background-image: linear-gradient(rgba(16, 29, 44, 0.93), rgba(16, 29, 44, 0.93)), url(../img/hero.jpeg);
  background-size: cover;
  background-position: center;
  display: grid;
  grid-template-rows: 1fr min-content 6rem 1fr;
  grid-template-columns: max-content;
  grid-row-gap: 1.5rem;
  justify-content: center; }
  .header__logo {
    height: 3rem;
    justify-self: center; }
  .header__btn {
    align-self: start;
    justify-self: start; }
  .header__seenon-text {
    display: grid;
    /* Defining columns */
    grid-template-columns: 1fr max-content 1fr;
    align-items: center;
    grid-column-gap: 1.5rem;
    font-size: 1.6rem;
    color: #aaa; }
    .header__seenon-text::before, .header__seenon-text::after {
      content: "";
      display: block;
      height: 1px;
      background-color: currentColor; }
  .header__seenon-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-column-gap: 3rem;
    justify-items: center;
    align-items: center; }
    .header__seenon-logos img {
      height: 2.5rem;
      filter: brightness(70%);
      max-width: 100%;
      /* 100% is the default, anything less than 70%, image gets darker, anything above 100% the image gets lighter */ }

/* Even text can be treated as a grid item, if we set header__seenon-text to a grid container, then Seen on text will be one of the grid item, so even text can be a grid item
Also pseudo items can also be grid item
Use one ::before pseudo element and ::after pseudo to create the two lines 
3 grid items, 2 lines and text i.e Seen on
*/
.realtors {
  background-color: #101d2c;
  grid-column: col-start 7 / full-end;
  padding: 3rem;
  /* 
  To center both horizontally and vertically in the realtors container
  we can also use flex box though
  */
  display: grid;
  justify-content: center;
  align-content: center;
  grid-row-gap: 2rem;
  justify-items: center;
  /* Grid with 1 column and two rows */ }
  .realtors__list {
    display: grid;
    grid-template-columns: min-content max-content;
    /* 1st column for images, 2nd column for text max-content*/
    grid-column-gap: 2rem;
    grid-row-gap: 5vh;
    align-items: center; }
  .realtors__img {
    width: 7rem;
    display: block;
    border-radius: 50%; }
  .realtors__sold {
    text-transform: uppercase;
    color: #aaa;
    margin-top: -3px;
    font-size: 1.2rem; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  /* features element here is a grid item, but now we want this grid item also to be a grid container
  Just like flex item can easily become flex container 
  
  Subgrid allow a grid that is inside a grid, to snap it's tracks to the parent grid for example, align its columns with the columns of parent grid
  */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  /* Auto fit simply creates as many tracks as can fit based on the width that we define
  Width of each of the tracks should always stay between 25 rem and 1fr
  */
  gap: 6rem;
  align-items: start; }

.feature {
  display: grid;
  grid-template-columns: min-content 1fr;
  /* For the rows, we don't need to define them 
  Many times we just want the content to define the rows in that case it's not necessary to define the rows*/
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem; }
  .feature__icon {
    fill: #c69963;
    width: 4.5rem;
    height: 4.5rem;
    grid-row: 1 / span 2;
    transform: translateY(-1rem);
    /* this -1 means not the end of the grid but the end of explicit grid
    i.e it only works with an explicit grid
    */
    /* Align-items is a property that controls the alignment of grid-items along grid cells */ }
  .feature__text {
    font-size: 1.7rem; }

/* 
One big grid which could fit all of these six items, one grid item for each feature and each feature is a grid container itself, which then itself contains 3 grid items icon, heading , text.

Grid allows us to nest as many grid.
*/
.story__pictures {
  background-color: #c69963;
  grid-column: full-start / col-end 4;
  background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
  background-size: cover;
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  grid-template-rows: repeat(6, 1fr);
  /* 6 by 6 grid
    Start at Line-2, end at Line-6
    */
  align-items: center; }

.story__img--1 {
  width: 100%;
  grid-row: 2 / 6;
  grid-column: 2 / 6;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1); }

.story__img--2 {
  width: 115%;
  grid-row: 4 / 6;
  grid-column: 4 / 7;
  /* We have to assign it a bigger z-index to make it visible on top of other elements */
  z-index: 20;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2); }

.story__content {
  background-color: #f9f7f6;
  grid-column: col-start 5 / full-end;
  padding: 6rem 8vw;
  /*  
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start; 
    
    Much easier with grid system
    */
  display: grid;
  align-content: center;
  justify-items: start;
  /* By default items were stretched so we need to set to start */ }

.story__text {
  font-size: 1.5rem;
  font-style: italic; }

.homes {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /* Grid container here is home's element, which is the parent of our 6 homes grid-items */
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  /* This will ensure that columns are completely responsive without having to write a media query*/
  grid-gap: 7rem; }

.home {
  background-color: #f9f7f6;
  /* Using implicit grid again, */
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-row-gap: 3.5rem; }
  .home__img {
    width: 100%;
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    z-index: 1; }
  .home__like {
    grid-row: 1 / 2;
    grid-column: 2 /3;
    fill: #c69963;
    height: 2.5rem;
    width: 2.5rem;
    z-index: 2;
    justify-self: end;
    margin: 1rem; }
  .home__name {
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    z-index: 3;
    align-self: end;
    /* justify-self and align-self are pretty simple with the difference that justify  does it horizontally, so in the row-axis
    and align does it vertically therefore in the column axis
    */
    transform: translateY(50%);
    /* 50% corresponds to 50% height of the element itself, so it gonna place it exactly at the center */
    width: 80%;
    justify-self: center;
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.6rem;
    text-align: center;
    padding: 1.25rem;
    background-color: #101d2c;
    color: #fff;
    font-weight: 400; }
  .home__location, .home__rooms {
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      fill: #c69963;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1 / -1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  /* We have 7 rows each with the height of 5vw - perfect size for height */
  /* Object-fit:cover is like setting background size to cover for the background image, So having an image filling a container
  We are going to add a parent container for each of the elements, and add Object fit to that parent element
  */
  grid-gap: 1.5rem;
  padding: 1.5rem; }
  .gallery__item--1 {
    grid-row: 1 / span 2;
    grid-column: 1 / span 2;
    /* No longer causing the problem with the intrinsic aspect ratio that we had before */ }
  .gallery__item--2 {
    grid-row: 1 / span 3;
    grid-column: 3 / span 3; }
  .gallery__item--3 {
    grid-row: 1 / span 2;
    grid-column: 6 / 7;
    /* Spanning 2 rows and just 1 column
      Starts from column-6 to 7 
      */ }
  .gallery__item--4 {
    grid-row: 1 / span 2;
    grid-column: 7 / -1; }
  .gallery__item--5 {
    grid-row: 3 / span 3;
    grid-column: 1 / span 2; }
  .gallery__item--6 {
    grid-row: 4 / span 2;
    grid-column: 3 / span 2; }
  .gallery__item--7 {
    grid-row: 4 / 5;
    grid-column: 5 / 6; }
  .gallery__item--8 {
    grid-row: 3 / span 2;
    grid-column: 6 / span 2; }
  .gallery__item--9 {
    grid-row: 3 / span 3;
    grid-column: 8 / -1;
    /* Starting from row - 3 and column - 8 and goes span across 3 rows */ }
  .gallery__item--10 {
    grid-row: 6 / span 2;
    grid-column: 1 / 2;
    /* row-6 spanning across 2 rows */ }
  .gallery__item--11 {
    grid-row: 6 / span 2;
    /* row-6 to row-8 */
    grid-column: 2 / span 2; }
  .gallery__item--12 {
    grid-row: 6 / span 2;
    grid-column: 4 / 5; }
  .gallery__item--13 {
    grid-row: 5 / span 3;
    grid-column: 5 / span 3; }
  .gallery__item--14 {
    grid-row: 6 / span 2;
    grid-column: 8 / -1; }
  .gallery__img {
    width: 100%;
    height: 100%;
    /* object-fit: cover only works if we set both the width and height*/
    display: block;
    object-fit: cover;
    /* Now the part that was overlapping figure element is now gone */ }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end;
  padding: 8rem; }

.nav {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  grid-gap: 2rem;
  /* As soon as one of these tracks gets narrowed than 20rem, one of the column track will disappear */
  align-items: center; }
  .nav__link:link, .nav__link:visited {
    font-size: 1.4rem;
    color: #fff;
    text-decoration: none;
    font-family: "Josefin Sans", sans-serif;
    text-transform: uppercase;
    text-align: center;
    padding: 1.5rem;
    display: block;
    transition: all 0.2s;
    background-color: rgba(255, 255, 255, 0.05); }
  .nav__link:hover, .nav__link:active {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-3px); }

.copyright {
  font-size: 1.4rem;
  color: #aaa;
  margin-top: 6rem;
  margin-right: auto;
  margin-left: auto;
  text-align: center;
  width: 70%; }
